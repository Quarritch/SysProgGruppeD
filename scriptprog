##################################################################
#### Programm zum Aufrufen verschiedener C-Skripte mit Bash
#### und Fehlererkennung sowie Loggen von Shared Memory und
#### Systemaufrufen
#### 
#### Gruppe: D
#### Teilnehmer: Timo Heider, Dirk Frerichs, Martin Pfeiffer,
####		 Odai Alheshan, Arne Nürnberg
#### Datum: 12.12.2023
##################################################################


#Errors stoppen das Programm
set -euo pipefail

#Funktion zum Aufruf von C-Skripten mit Überwachung der PID und Shared Memory
function start_c_programm () {
	
	local programm_name=$1			#Übergabe Programmname

	echo "$programm_name is running"	#Bestätigung, dass Programm läuft
	
	if [ "$programm_name" = "sensor" ]; then	#Wenn sensor aufgerufen werden soll, muss 2. Argument verarbeitet werden
	
		local inputvalue=$2			#Sinus oder Rechteckfunktion

		strace -o ./logs/$programm_name-syscall.log ./programme/$programm_name "$inputvalue" &		#Loggen der Systemaufrufe und Programmaufruf
	else
		
		strace -o ./logs/$programm_name-syscall.log ./programme/$programm_name &		#Loggen der Systemaufrufe und Programmaufruf
		
	fi

	pid=$!			#PID des letzten aufgerufenen Prozesses


	#strace -f ./$programm_name 2>&1 | grep "shm"		
	ipcs -mp $pid > ./logs/$programm_name-ipcs.log		#Loggen der Shared Memory Segmente
			
	sleep 1
	
}



#Hauptprogramm

programm1="control"			#Benennung nach Programmnamen

case $1 in				#Auswahl der Eingangsfunktion durch Argument in bash
	"sinus" | "rechteck")		#Sinus oder Rechteck
	programm2="sensor"		#Benennung nach Programmnamen	
	;;

	*)				#Errormeldung bei falschen Argumenten
	echo "Main: Usage: [sinus,rechteck]"
	exit 
	;;

esac

programm3="motor"			#Benennung nach Programmnamen



if [ -d "./logs" ]; then		#Falls ./logs existiert -> löschen und neu erzeugen
	rm -r ./logs
	mkdir ./logs
	mkdir ./logs/werte
else					#Falls ./logs nicht existiert -> erzeugen
	mkdir ./logs
	mkdir ./logs/werte
fi


start_c_programm "$programm1" 		#Aufruf Funktion zum Aufrufen der Programme

start_c_programm "$programm2" "$1"	#Aufruf Funktion zum Aufrufen der Programme mit Argument (Sinus, Rechteck)	

start_c_programm "$programm3"		#Aufruf Funktion zum Aufrufen der Programme mit Argument


counter=0				#Zählvariable Fehlaufrufe von Programmen

while [ 1 ]		#unendliche Schleife
do
	read -t 5 -p "Geben Sie *exit* ein (oder warten Sie 5 Sekunden zum Fortfahren): " userInput

    	if [ "$userInput" = "exit" ] || [ "$counter" = "4" ]; then
        	echo "Das Programm wird nun heruntergefahren"
		mkdir ./logs/finish
        	while [ 1 ]
		do
			if [ pgrep -x "$programm1" > /dev/null -eq 1 ] && [ pgrep -x > /dev/null "$programm2" -eq 1 ] && [ pgrep -x "$programm3" > /dev/null -eq 1 ]; then
			echo "Hauptprogramm $0 wird beendet!"
			pkill -SIGTERM "$0"
    	
	else		#Abrufen

		if pgrep -x "$programm1" > /dev/null; then
			echo "Programm $programm1 runs at $(date)" > ./logs/$programm1-run.log
		else
			start_c_programm "$programm1"
			echo "$programm1 wurde erneut gestartet"
                        ((counter++))
		fi


		if pgrep -x "$programm2" > /dev/null; then	
			echo "Programm $programm2 runs at $(date)" > ./logs/$programm2-run.log
		else
			start_c_programm "$programm2" "$1" 
			echo "$programm2 wurde erneut gestartet"
                        ((counter++))
		fi


		if pgrep -x "$programm3" > /dev/null; then
			echo "Programm $programm3 runs at $(date)" > ./logs/$programm3-run.log
		else
			start_c_programm "$programm3"
			echo "$programm3 wurde erneut gestartet"
                        ((counter++))
		fi
	fi

sleep 1

done

